# Clustering
## Normalization
```{r}
#pull the gex_f object out
object = dataList[["gex_f"]]

#Setting the active assay to "RNA" --> Seurat functions operate on the active assay by default
DefaultAssay(object) = 'RNA'

#Normalize data: takes raw counts and converts them into normalized expression values - divides counts by the cell's total counts -> multiplies by scale.factor (default 10000) --> applies log1p
object = NormalizeData(object)
```

## Variable features
```{r}
#find variable features: selects the genes that show the highest biological variance across cells - "vst" is the variance-stabilizing selection method
object = FindVariableFeatures(object, selection.method = "vst")

#shows variable genes
VariableFeaturePlot(object)     
Top10 = head(VariableFeatures(object), 10)
LabelPoints(plot = VariableFeaturePlot(object), points = Top10, repel = TRUE)
```

## PCA and ElbowPlot
```{r}
#scale: z-score (mean=0, sd=1) scales each gene across cells ((x-mean)/sd) + limits scaling to the variable features
object = ScaleData(object, features = VariableFeatures(object))

#computes principal components (PCs) using the scale.data from the active assay
object = RunPCA(object, verbose = FALSE)

#ElbowPlot: plots standard deviations (or variance explained) of the first 50 PCs --> used to visually choose how many PCs capture most variation (at the elbow, the variance drops) --> use the top PCs to build a neighbor graph and cluster cells
Elbow = ElbowPlot(object, ndims = 50)

# Add one red point at PC 20
Elbow + geom_point(data = data.frame(
    PC = 20,
    StDev = object[["pca"]]@stdev[20]),
  aes(x = PC, y = StDev),
  color = "red",
  size = 2)
```

## UMAP
```{r}
#Constructs a shared nearest neighbor (SNN) using the chosen PCs 1:15
object = FindNeighbors(object, dims = 1:20)

#run graph-based clustering (lower=fewer, larger clusters; higher=more, smaller clusters)
object = FindClusters(object, resolution = 0.5)

#UMAP using the specified PCs - it is only visualization (not the clustering it self)
object = RunUMAP(object, dims = 1:20)

#save back into list
dataList[["gex_f"]] = object

DimPlot(object, label = T, reduction = "umap") + NoLegend()
```

## Marker genes
```{r}
FeaturePlot(object, features = c("PTPRC", "PECAM1", "ADIPOQ", "PDGFRA", "ACTA2"), label = T)

```

# Featureplot
```{r}
VlnPlot(object, features = c("nFeature_RNA", "mitochondrial_prop", "nCount_RNA"), pt.size = 0, flip = TRUE, ncol = 3)

```
