# Integration

## Normalization and achor finding 

```{r}
#select common integration features there are consistenly variable across datasets, which will be used for alignment and integration (represent biology, not batch)
features = SelectIntegrationFeatures(object.list = dataList, nfeatures = 4000)

write.csv(features, "/maps/projects/scheele/data/Maria/250929_EPICAD_integration_features.csv")

#apply SCTransform normalization consistently across datasets
integration_dataList = PrepSCTIntegration(object.list = dataList, anchor.features = features)

# find the anchors in RNA assays using CCA reduction ((Canonical Correlation Analysis) as the dimensionality reduction for finding shared sources of variation across datasets)
anchors = FindIntegrationAnchors(object.list = integration_dataList, normalization.method = "SCT", anchor.features = features)
# Anchors are pairs of cells (one from each dataset) that are biologically similar â€” these act as reference points to align datasets
# anchor.features: Restricts anchor finding to a set of selected features (usually highly variable genes across datasets)

integrated = IntegrateData(anchorset = anchors, normalization.method = "SCT")
```

## Reclustering using integrated assay - PCA + Elbow

```{r}
DefaultAssay(integrated) = "integrated"

integrated = RunPCA(integrated,  verbose = FALSE)

Elbow_inte = ElbowPlot(integrated, ndims = 50)
Elbow_inte + geom_point(data = data.frame(
    PC = 25,
    StDev = integrated[["pca"]]@stdev[25]),
  aes(x = PC, y = StDev),
  color = "red",
  size = 2)

ggsave("epicad_plots/inte_elbow.pdf", scale = 1, bg = "white")
ggsave("epicad_plots/inte_elbow.png", scale = 1, bg = "white")
```

## Reclustering - graph-based + UMAP
```{r}
integrated = FindNeighbors(integrated, dims = 1:25)
# build k-nearest neighbor graph of cells in PCA space

integrated = FindClusters(integrated, resolution = 0.6)
# applies Louvian clustering

integrated = RunUMAP(integrated, dims = 1:25)
# projects cells into 2D for visualization

DimPlot(integrated, reduction = "umap", label = TRUE) + NoLegend()

ggsave("epicad_plots/inte_UMAP.pdf", scale = 1, bg = "white")
ggsave("epicad_plots/inte_UMAP.png", scale = 1, bg = "white")
```

## UMAP - coloured by reaction
```{r}
# check that orig.ident are integrated and not separated
Idents(integrated) = "orig.ident"
DimPlot(integrated, reduction = "umap", label = FALSE)
print(integrated)

ggsave("epicad_plots/orig.ident_UMAP.pdf", scale = 1, bg = "white")
ggsave("epicad_plots/orig.ident_UMAP.png", scale = 1, bg = "white")
```

## UMAP - coloured by depot
```{r}
Idents(integrated) = "depot"
DimPlot(integrated, reduction = "umap", label = FALSE)
print(integrated)

ggsave("epicad_plots/depot_UMAP.pdf", scale = 1, bg = "white")
ggsave("epicad_plots/depot_UMAP.png", scale = 1, bg = "white")
```

## Marker genes
```{r}
FeaturePlot(integrated, features = c("PTPRC", "PECAM1", "ADIPOQ", "PDGFRA", "ACTA2"), label = F)
ggsave("epicad_plots/integrated_markerGenes.pdf", height = 12 ,width = 10, bg = "white")
ggsave("epicad_plots/integrated_markerGenes.png", height = 12 ,width = 10, bg = "white")
```

## Feature plot
```{r}
Idents(integrated) = "seurat_clusters"

VlnPlot(integrated, features = c("nFeature_RNA", "mitochondrial_prop", "nCount_RNA"), pt.size = 0, flip = TRUE, ncol = 3)
ggsave("epicad_plots/integrated_featurePlot.pdf", width = 20, bg = "white")
ggsave("epicad_plots/integrated_featurePlot.png", width = 20, bg = "white")
```
